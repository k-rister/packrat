#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

if [ -z "${1}" -o ! -d "${1}" ]; then
    echo "ERROR: You must specify a valid destination directory where data will be collected!"
    exit 1
else
    DEST_DIR="${1}"
    DEST_DIR=$(readlink -e ${DEST_DIR})
    DEST_DIR="${DEST_DIR}/packrat-archive"
fi

if [ -d "${DEST_DIR}" ]; then
    echo "ERROR: A packrat archive already exists at '${DEST_DIR}'!"
    exit 2
elif ! mkdir "${DEST_DIR}"; then
    echo "ERROR: Could not create destination directory '${DEST_DIR}' for collected data!"
    exit 3
fi

################################################################################

function clean_path() {
    local PATH="${@}"

    # remove './' from the beginning of the PATH string
    echo -n "${PATH#./}"
}

function list_args() {
    while [ ${#} -ne 0 ]; do
	echo -n "\"${1}\" "
	shift
    done
}

function copy() {
    local SRC="${1}"
    local DST="${2}"

    if [ "${#}" -ne 2 ]; then
	echo "ERROR: 'copy' requires two arguments (not ["$(list_args "${@}")"])"
	return
    fi

    # use cat with redirect so that errors (ie. file not found) are
    # captured in place
    cat "${SRC}" > "${DST}" 2>&1
}

function append_file() {
    local SRC="${1}"
    local DST="${2}"

    if [ "${#}" -ne 2 ]; then
	echo "ERROR: 'append_file' requires two arguments (not ["$(list_args "${@}")"])"
	return
    fi

    if [ ! -e "${DST}" ]; then
	echo "ERROR: 'append_file' requires a valid destination file (not [${DST}])"
	return
    fi

    # use cat with redirect to that errors (ie. file not found) are
    # captured in place
    cat "${SRC}" >> "${DST}" 2>&1
}

function append_str() {
    local STR="${1}"
    local DST="${2}"

    if [ "${#}" -ne 2 ]; then
	echo "ERROR: 'append_str' requires two arguments (not ["$(list_args "${@}")"])"
	return
    fi

    if [ ! -e "${DST}" ]; then
	echo "ERROR: 'append_str' requires a valid destination file (not [${DST}])"
	return
    fi

    echo -e "${STR}" >> "${DST}" 2>&1
}

function create_dir() {
    local DEST="${1}"

    if ! mkdir ${DEST}; then
	echo "ERROR: Could not create '${DEST}'!"
    fi
}

function run_collectors() {
    local DEST="${1}"

    collect_distro_info "${DEST}" > "${DEST}/distro.log" 2>&1 &
    collect_package_manager_info "${DEST}" > "${DEST}/package-manager.log" 2>&1 &
    collect_env_info "${DEST}" > "${DEST}/env.log" 2>&1 &
    collect_cpu_info "${DEST}" > "${DEST}/cpu.log" 2>&1 &
    collect_device_info "${DEST}" > "${DEST}/device.log" 2>&1 &
    collect_system_info "${DEST}" > "${DEST}/system.log" 2>&1 &
    collect_kernel_info "${DEST}" > "${DEST}/kernel.log" 2>&1 &
    collect_block_info "${DEST}" > "${DEST}/block.log" 2>&1 &
    collect_memory_info "${DEST}" > "${DEST}/memory.log" 2>&1 &
    collect_net_info "${DEST}" > "${DEST}/net.log" 2>&1 &
    collect_cgroup_info "${DEST}" > "${DEST}/cgroup.log" 2>&1 &
    collect_libvirt_info "${DEST}" > "${DEST}/libvirt.log" 2>&1 &
    collect_firewall_info "${DEST}" > "${DEST}/firewall.log" 2>&1 &
    collect_container_info "${DEST}" > "${DEST}/container.log" 2>&1 &

    wait
}

function compress_data() {
    local DEST="${1}"

    local COMPRESS_LOG="${DEST}/compress.log.xz"

    {
        find "${DEST}" -type f -print0 | xargs -0 -L 1 xz -T0
    } 2>&1 | xz -T0 > "${COMPRESS_LOG}"
}

################################################################################

function collect_distro_info() {
    local DEST="${1}/distro"

    create_dir "${DEST}"

    copy "/etc/os-release" "${DEST}/os-release"
}

function collect_package_manager_info() {
    local DEST="${1}/package-manager"

    create_dir "${DEST}"

    if which rpm > /dev/null 2>&1; then
	rpm -qa > "${DEST}/rpm.qa.out" 2>&1
    fi
}

function collect_env_info() {
    local DEST="${1}/env"

    create_dir "${DEST}"

    env > "${DEST}/env.out" 2>&1
    pwd > "${DEST}/pwd.out" 2>&1
    hostname --all-fqdns > "${DEST}/hostname.fqdns.out" 2>&1
    hostname --alias > "${DEST}/hostname.alias.out" 2>&1
    hostname --all-ip-addresses > "${DEST}/hostname.ip-addresses.out" 2>&1
}

function collect_cpu_info() {
    local DEST="${1}/cpu"

    create_dir "${DEST}"

    lscpu > "${DEST}/lscpu.normal.out" 2>&1
    lscpu --all --extended > "${DEST}/lscpu.all.out" 2>&1
    lscpu --parse > "${DEST}/lscpu.parse.out" 2>&1

    copy "/proc/cpuinfo" "${DEST}/proc-cpuinfo"

    if pushd /sys/devices/system/cpu > /dev/null; then
        local CPU_FILE="${DEST}/sys-devices-system-cpu"

        touch "${CPU_FILE}"

        local FILE=""
        for FILE in $(find . -type f); do
            append_str "$(clean_path ${FILE}):" "${CPU_FILE}"
            append_file "${FILE}" "${CPU_FILE}"
            append_str "" "${CPU_FILE}"
        done

        popd > /dev/null
    fi

    if pushd /sys/devices/system/cpu/intel_pstate > /dev/null; then
        local DRIVER_FILE="${DEST}/intel_pstate"

        touch "${DRIVER_FILE}"

        for FILE in $(find . -type f); do
            append_str "$(clean_path ${FILE}):" "${DRIVER_FILE}"
            append_file "${FILE}" "${DRIVER_FILE}"
            append_str "" "${DRIVER_FILE}"
        done

        popd > /dev/null
    fi
}

function collect_device_info() {
    local DEST="${1}/device"

    create_dir "${DEST}"

    lspci -tv > "${DEST}/lspci.hierarchy.out" 2>&1
    lspci -vvv > "${DEST}/lspci.verbose.out" 2>&1

    copy "/proc/interrupts" "${DEST}/proc-interrupts"
}

function collect_system_info() {
    local DEST="${1}/system"

    create_dir "${DEST}"

    dmidecode > "${DEST}/dmidecode.out" 2>&1
    lstopo-no-graphics --whole-system --whole-io --verbose > "${DEST}/lstopo.out" 2>&1
}

function collect_kernel_info() {
    local DEST="${1}/kernel"

    create_dir "${DEST}"

    dmesg --ctime --show-delta > "${DEST}/dmesg.out" 2>&1
    uname --all > "${DEST}/uname.out" 2>&1
    lsmod > "${DEST}/lsmod.out" 2>&1
    sysctl --all > "${DEST}/sysctl.out" 2>&1
    getenforce > "${DEST}/getenforce.out" 2>&1

    copy "/proc/cmdline" "${DEST}/proc-cmdline"
    copy "/proc/modules" "${DEST}/proc-modules"

    if pushd /sys/module > /dev/null; then
	create_dir "${DEST}/sys-module"

	local MODULE=""
	for MODULE in $(ls -1d * 2> /dev/null); do
	    local MODULE_FILE="${DEST}/sys-module/${MODULE}"

	    touch "${MODULE_FILE}"

	    if pushd "${MODULE}" > /dev/null; then
		local SUBDIR=""
		for SUBDIR in "parameters"; do
		    if [ -d "${SUBDIR}" ]; then
			if pushd "${SUBDIR}" > /dev/null; then
			    local FILE=""
			    for FILE in $(ls -1 *); do
				append_str "${SUBDIR}/$(clean_path ${FILE}):" "${MODULE_FILE}"
				append_file "${FILE}" "${MODULE_FILE}"
				append_str "" "${MODULE_FILE}"
			    done

			    popd > /dev/null
			fi
		    fi
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi

    if pushd /sys/devices/system/clocksource > /dev/null; then
	local CLOCKSOURCE_FILE="${DEST}/sys-devices-system-clocksource"

	touch "${CLOCKSOURCE_FILE}"

	local FILE=""
	for FILE in $(find . -type f); do
	    append_str "$(clean_path ${FILE}):" "${CLOCKSOURCE_FILE}"
	    append_file "${FILE}" "${CLOCKSOURCE_FILE}"
	    append_str "" "${CLOCKSOURCE_FILE}"
	done

	popd > /dev/null
    fi

    if pushd /sys/class/iommu > /dev/null; then
	local IOMMU_FILE="${DEST}/sys-class-iommu"

	touch "${IOMMU_FILE}"

	local GROUP=""
	for GROUP in $(ls -1d * 2> /dev/null); do
	    if pushd "${GROUP}" > /dev/null; then
		local FILE=""
		for FILE in $(find . -type f); do
		    append_str "${GROUP}/$(clean_path ${FILE}):" "${CLOCKSOURCE_FILE}"
		    append_file "${FILE}" "${CLOCKSOURCE_FILE}"
		    append_str "" "${CLOCKSOURCE_FILE}"
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi
}

function collect_block_info() {
    local DEST="${1}/block"

    create_dir "${DEST}"

    local LSBLK="lsblk --all --topology --discard --fs --perms --paths"
    ${LSBLK} > "${DEST}/lsblk.normal.out" 2>&1
    ${LSBLK} --pairs > "${DEST}/lsblk.key-value.out" 2>&1

    dmsetup ls > "${DEST}/dmsetup.ls.out" 2>&1
    dmsetup table > "${DEST}/dmsetup.table.out" 2>&1

    copy "/proc/partitions" "${DEST}/proc-partitions"
    copy "/proc/mounts" "${DEST}/proc-mounts"
    copy "/proc/mdstat" "${DEST}/proc-mdstat"

    findmnt > "${DEST}/findmnt.out" 2>&1
    findmnt --json > "${DEST}/findmnt.json.out" 2>&1

    create_dir "${DEST}/lvm"
    pvs --all --verbose > "${DEST}/lvm/pvs.out" 2>&1
    vgs --all --verbose > "${DEST}/lvm/vgs.out" 2>&1
    lvs --all --verbose > "${DEST}/lvm/lvs.out" 2>&1
    pvdisplay --verbose > "${DEST}/lvm/pvdisplay.out" 2>&1
    vgdisplay --verbose > "${DEST}/lvm/vgdisplay.out" 2>&1
    lvdisplay --verbose --maps > "${DEST}/lvm/lvdisplay.out" 2>&1

    if pushd /sys/block > /dev/null; then
	create_dir "${DEST}/sys-block"

	local BLKDEV=""
	for BLKDEV in $(ls -1d * 2> /dev/null); do
	    local BLKDEV_FILE="${DEST}/sys-block/${BLKDEV}"

	    touch "${BLKDEV_FILE}"

	    if pushd "${BLKDEV}" > /dev/null; then
		local FILE=""
		for FILE in $(find . -maxdepth 1 -type f | sort); do
		    append_str "$(clean_path ${FILE}):" "${BLKDEV_FILE}"
		    append_file "${FILE}" "${BLKDEV_FILE}"
		    append_str "" "${BLKDEV_FILE}"
		done

		local SUBDIR=""
		for SUBDIR in "queue" "mq"; do
		    if [ -d "${SUBDIR}" ]; then
			if pushd "${SUBDIR}" > /dev/null; then
			    for FILE in $(find . -type f | sort); do
				append_str "${SUBDIR}/$(clean_path ${FILE}):" "${BLKDEV_FILE}"
				append_file "${FILE}" "${BLKDEV_FILE}"
				append_str "" "${BLKDEV_FILE}"
			    done

			    popd > /dev/null
			fi
		    fi
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi
}

function collect_memory_info() {
    local DEST="${1}/memory"

    create_dir "${DEST}"

    copy "/proc/meminfo" "${DEST}/proc-meminfo"
    copy "/proc/slabinfo" "${DEST}/proc-slabinfo"
    copy "/proc/zoneinfo" "${DEST}/proc-zoneinfo"
    copy "/proc/buddyinfo" "${DEST}/proc-buddyinfo"
    copy "/proc/pagetypeinfo" "${DEST}/proc-pagetypeinfo"

    if pushd /sys/kernel/mm/hugepages > /dev/null; then
	create_dir "${DEST}/sys-kernel-mm-hugepages"

	local HP=""
	for HP in $(ls -1d * 2> /dev/null); do
	    local HP_FILE="${DEST}/sys-kernel-mm-hugepages/${HP}"

	    touch "${HP_FILE}"

	    if pushd "${HP}" > /dev/null; then
		local FILE=""
		for FILE in $(ls -1 *); do
		    append_str "$(clean_path ${FILE}):" "${HP_FILE}"
		    append_file "${FILE}" "${HP_FILE}"
		    append_str "" "${HP_FILE}"
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi

    if pushd /sys/kernel/mm/transparent_hugepage > /dev/null; then
	local THP_FILE="${DEST}/sys-kernel-mm-transparent_hugepage"

	touch "${THP_FILE}"

	local FILE=""
	for FILE in $(find . -type f); do
	    append_str "$(clean_path ${FILE}):" "${THP_FILE}"
	    append_file "${FILE}" "${THP_FILE}"
	    append_str "" "${THP_FILE}"
	done

	popd > /dev/null
    fi

    if pushd /sys/devices/system/node > /dev/null; then
	local NODE_FILE="${DEST}/sys-devices-system-node"

	touch "${NODE_FILE}"

	local FILE=""
	for FILE in $(find . -type f | grep -v "^\./node.*/memory"); do
	    append_str "$(clean_path ${FILE}):" "${NODE_FILE}"
	    append_file "${FILE}" "${NODE_FILE}"
	    append_str "" "${NODE_FILE}"
	done

	popd > /dev/null
    fi
}

function collect_net_info() {
    local DEST="${1}/net"

    create_dir "${DEST}"

    ifconfig -a -v > "${DEST}/ifconfig.out" 2>&1
    bridge link show > "${DEST}/bridge.link.out" 2>&1
    brctl show > "${DEST}/brctl.out" 2>&1

    ip -json -pretty -statistics -details link show > "${DEST}/ip.link.out" 2>&1
    ip -json -pretty -statistics -details address show > "${DEST}/ip.address.out" 2>&1
    ip -json -pretty -statistics -details route show > "${DEST}/ip.route.out" 2>&1
    ip -json -pretty -statistics -details netns show > "${DEST}/ip.netns.out" 2>&1

    nmcli --pretty > "${DEST}/nmcli.out" 2>&1
    nmcli general status > "${DEST}/nmcli.general.status.out" 2>&1
    nmcli device show > "${DEST}/nmcli.device.show.out" 2>&1
    nmcli device status > "${DEST}/nmcli.device.status.out" 2>&1
    nmcli connection show > "${DEST}/nmcli.connection.out" 2>&1

    if pushd /sys/class/net > /dev/null; then
	local ETHTOOL_FILE="${DEST}/ethtool.out"

	touch "${ETHTOOL_FILE}"

	local DEV=""
	for DEV in $(ls -1d * 2> /dev/null); do
	    ethtool "${DEV}" >> "${ETHTOOL_FILE}" 2>&1
	    echo >> "${ETHTOOL_FILE}"
	done

	create_dir "${DEST}/sys-class-net"

	for DEV in $(ls -1d * 2> /dev/null); do
	    local DEV_FILE="${DEST}/sys-class-net/${DEV}"

	    touch "${DEV_FILE}"

	    if pushd "${DEV}" > /dev/null; then
		local FILE=""
		for FILE in $(find . -maxdepth 1 -type f | sort); do
		    append_str "$(clean_path ${FILE}):" "${DEV_FILE}"
		    append_file "${FILE}" "${DEV_FILE}"
		    append_str "" "${DEV_FILE}"
		done

		local SUBDIR=""
		for SUBDIR in "device"; do
		    if [ -d "${SUBDIR}" ]; then
			if pushd "${SUBDIR}" > /dev/null; then
			    for FILE in $(find . -type f -not -path "./net/*" | sort); do
				append_str "${SUBDIR}/$(clean_path ${FILE}):" "${DEV_FILE}"
				append_file "${FILE}" "${DEV_FILE}"
				append_str "" "${DEV_FILE}"
			    done

			    popd > /dev/null
			fi
		    fi
		done

		for SUBDIR in "statistics"; do
		    if [ -d "${SUBDIR}" ]; then
			if pushd "${SUBDIR}" > /dev/null; then
			    for FILE in $(find . -type f | sort); do
				append_str "${SUBDIR}/$(clean_path ${FILE}):" "${DEV_FILE}"
				append_file "${FILE}" "${DEV_FILE}"
				append_str "" "${DEV_FILE}"
			    done

			    popd > /dev/null
			fi
		    fi
		done

		local QSUBDIR=""
		for SUBDIR in "queues"; do
		    if [ -d "${SUBDIR}" ]; then
			if pushd "${SUBDIR}" > /dev/null; then
			    for QSUBDIR in $(ls -1d * | sort); do
				if pushd "${QSUBDIR}" > /dev/null; then
				    for FILE in $(find . -maxdepth 1 -type f | sort); do
					append_str "${SUBDIR}/${QSUBDIR}/$(clean_path ${FILE}):" "${DEV_FILE}"
					append_file "${FILE}" "${DEV_FILE}"
					append_str "" "${DEV_FILE}"
				    done

				    popd > /dev/null
				fi
			    done

			    popd > /dev/null
			fi
		    fi
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi
}

function collect_cgroup_info() {
    local DEST="${1}/cgroup"

    create_dir "${DEST}"

    if ! grep -q "cgroup" /proc/mounts; then
	echo "Could not find cgroup mount"
	return
    fi

    local CPUSET_DIR=$(grep "cgroup/cpuset" /proc/mounts | awk '{ print $2 }')
    if [ ! -z "${CPUSET_DIR}" ] && pushd "${CPUSET_DIR}" > /dev/null; then
	local CPUSET_FILE="${DEST}/cpuset"

	touch "${CPUSET_FILE}"

	local FILE=""
	for FILE in $(find . -type f); do
	    append_str "$(clean_path ${FILE}):" "${CPUSET_FILE}"
	    append_file "${FILE}" "${CPUSET_FILE}"
	    append_str "" "${CPUSET_FILE}"
	done

	popd > /dev/null
    else
	echo "Could not find CPUSET [${CPUSET_DIR}]"
    fi

    local CPU_DIR=$(grep "cgroup/cpu," /proc/mounts | awk '{ print $2 }')
    if [ ! -z "${CPU_DIR}" ] && pushd "${CPU_DIR}" > /dev/null; then
	local CPU_FILE="${DEST}/cpu"

	touch "${CPU_FILE}"

	local FILE=""
	for FILE in $(find . -type f); do
	    append_str "$(clean_path ${FILE}):" "${CPU_FILE}"
	    append_file "${FILE}" "${CPU_FILE}"
	    append_str "" "${CPU_FILE}"
	done

	popd > /dev/null
    else
	echo "Could not find CPU [${CPU_DIR}]"
    fi
}

function collect_libvirt_info() {
    local DEST="${1}/libvirt"

    create_dir "${DEST}"

    virsh sysinfo > "${DEST}/virsh.sysinfo.out" 2>&1
    virsh nodeinfo > "${DEST}/virsh.nodeinfo.out" 2>&1
    virsh nodecpumap > "${DEST}/virsh.nodecpumap.out" 2>&1
    virsh capabilities > "${DEST}/virsh.capabilities.out" 2>&1
    virsh domcapabilities > "${DEST}/virsh.domcapabilities.out" 2>&1
    virsh list --all > "${DEST}/virsh.list.out" 2>&1
    virsh net-list --all > "${DEST}/virsh.net-list.out" 2>&1
    virsh iface-list --all > "${DEST}/virsh.iface-list.out" 2>&1
    virsh pool-list --all > "${DEST}/virsh.pool-list.out" 2>&1

    create_dir "${DEST}/domains"
    local DOMAIN=""
    for DOMAIN in $(virsh list --all --name); do
	virsh dumpxml "${DOMAIN}" > "${DEST}/domains/${DOMAIN}.xml" 2>&1
    done

    create_dir "${DEST}/nets"
    local NET=""
    for NET in $(virsh net-list --all --name); do
	virsh net-dumpxml "${NET}" > "${DEST}/nets/${NET}.xml" 2>&1
    done

    create_dir "${DEST}/nodedevs"
    local NODEDEV=""
    for NODEDEV in $(virsh nodedev-list); do
	virsh nodedev-dumpxml "${NODEDEV}" > "${DEST}/nodedevs/${NODEDEV}.xml" 2>&1
    done

    create_dir "${DEST}/pools"
    local POOL=""
    for POOL in $(virsh pool-list --all --name); do
	virsh pool-dumpxml "${POOL}" > "${DEST}/pools/${POOL}.xml" 2>&1
	virsh vol-list --pool "${POOL}" --details > "${DEST}/pools/virsh.vol-list.${POOL}.out" 2>&1
    done
}

function collect_firewall_info() {
    local DEST="${1}/firewall"

    create_dir "${DEST}"

    iptables -nvL -t filter > "${DEST}/iptables.filter.out" 2>&1
    iptables -nvL -t nat > "${DEST}/iptables.nat.out" 2>&1
    ebtables -L > "${DEST}/ebtables.out" 2>&1
    nft list ruleset > "${DEST}/nft.out" 2>&1
    firewall-cmd --list-all > "${DEST}/firewall-cmd.list-all.out" 2>&1
}

function collect_container_info() {
    local DEST="${1}/container"

    create_dir "${DEST}"

    podman info > "${DEST}/podman.info.out" 2>&1
    podman info --format json > "${DEST}/podman.info.json" 2>&1
    podman ps --all --size > "${DEST}/podman.ps.all.out" 2>&1
    podman ps --namespace > "${DEST}/podman.ps.namespace.out" 2>&1
    podman ps --external > "${DEST}/podman.ps.external.out" 2>&1
    podman images --all --no-trunc > "${DEST}/podman.images.all.out" 2>&1
    podman images --all --no-trunc --format json > "${DEST}/podman.images.all.json" 2>&1
    podman version > "${DEST}/podman.version.out" 2>&1
    podman version --format json > "${DEST}/podman.version.json" 2>&1
}

################################################################################

run_collectors "${DEST_DIR}"

compress_data "${DEST_DIR}"
